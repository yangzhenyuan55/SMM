# 多线程


### 进程和线程的关系
* 在Java语言中，堆内存和方法区内存共享，但是栈内存独立，一个线程一个栈

### Java语言中实现线程的方式
* 第一种方式：编写一个类直接继承java.lang.Thread，重写run方法
  ```java
  public class ThreadTest {

      @Test
      public void testThread(){
          MyThread myThread = new MyThread();
          myThread.setName("MyThread");
          // 分支线程启动
          myThread.start();

          // 主线程
          for (int i = 0; i < 10; i++) {
              System.out.println("["+ Thread.currentThread().getName() +"] ----> " + i);
          }
      }
  }
  ```
  * start()方法的作用：启动一个分支线程，在JVM中开辟一个新的栈空间，这个方法的任务完成之后瞬间就结束了，<br>
    只是为了开辟一个栈空间，会自动调用run()方法，run()方法在栈的底部，run()方法等同于main方法。如果只<br>
    调用run()方法不会启动分支线程，还是在原来的线程中运行run()方法
  * myThread.start()这行代码不执行结束，下面的代码不会执行的，但是因为这个start()这个方法执行的很快，<br>
    然后会接着同时执行主线程代码和分支线程的代码，所以控制台输出的结果可能会是两个线程的代码交替执行

* 第二种方式：编写一个类，实现java.lang.Runnable接口，实现run()方法，把Runnable实现类作为参数传入Thread构造方法来创建一个线程类
    * Runnable并不是一个线程类，是一个可运行的类，还不是一个线程


### 线程的生命周期
* 在线程的生命周期中，它要经过新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态

### 线程调度
* 常见的线程调度模型
    * 抢占式调度模型：哪个线程的优先级比较高，抢到CPU时间片的概率就高一些，Java采用的就是抢占式调度模型
    * 均分式调度模型：平均分配CPU时间片，每个线程占有的CPU时间片长度一样

* 线程调度有关方法
    * Thread.yield(); 线程让位，让当前线程从运行状态回到就绪状态，回到就绪状态之后有可能还会抢到CPU时间片
    * void join()：合并线程
      ```java
      public MyThread1 extends Thread {
          public void doSome() {
              MyThread2 t2 = new MyThread2();
              t2.join(); // 当前的t1线程进入阻塞状态，t2线程执行，等到t2线程执行完毕，继续执行t1线程
          }
      }
      ```


### 如何解决线程安全问题
    * 第一种：尽量使用局部变量代替实例变量和静态变量
    * 第二种：如果必须是实例变量，可以考虑创建多个对象，这样实例变量的内存就不共享了。（一个线程对应一个对象，n个线程对应n个对象）
    * 第三种：如果不能使用局部变量，对象也不能创建多个，这个时候只能使用synchronized关键字，线程同步机制

### 守护线程
    * Java语言中线程分为两大类：
        * 守护线程(后台线程): 具有代表性的就是垃圾回收线程
        * 用户线程: 注意main方法是用户线程
### 实现线程的第三种方式
    * 实现Callable接口
    * 之前的两种方法都是无法获取线程返回值的，因为run方法返回值为void
    * 思考：系统委派一个线程去执行一个任务，该线程执行完任务之后，可能会有一个执行结果，如何拿到这个执行结果呢？
















